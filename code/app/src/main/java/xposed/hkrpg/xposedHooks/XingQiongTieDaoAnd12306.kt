package xposed.hkrpg.xposedHooks

import android.graphics.BitmapFactory
import android.graphics.drawable.BitmapDrawable
import android.graphics.drawable.Drawable
import android.util.Base64
import com.github.kyuubiran.ezxhelper.utils.findMethod
import com.github.kyuubiran.ezxhelper.utils.getObjectAs
import com.github.kyuubiran.ezxhelper.utils.hookBefore
import com.github.kyuubiran.ezxhelper.utils.isNotStatic
import com.github.kyuubiran.ezxhelper.utils.isPublic
import com.github.kyuubiran.ezxhelper.utils.paramCount
import de.robv.android.xposed.callbacks.XC_LoadPackage

const val ICON_HKRPG_BASE64 = ""
const val ICON_12306_BASE64 = "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"

const val APP_LABEL_HKRPG = "崩坏：星穹铁道"
const val APP_LABEL_12306 = "铁路12306"

const val PACKAGE_NAME_HKRPG = "com.miHoYo.hkrpg"
const val PACKAGE_NAME_12306 = "com.MobileTicket"


fun hookAndroidForXingQiongTieDaoAnd12306(lpparam: XC_LoadPackage.LoadPackageParam) {
    // 12306 -> 穹轨
    hookIcon(PACKAGE_NAME_12306, ICON_HKRPG_BASE64)
    hookLabel(PACKAGE_NAME_12306, APP_LABEL_HKRPG)

    // 穹轨 -> 12306
    hookIcon(PACKAGE_NAME_HKRPG, ICON_12306_BASE64)
    hookLabel(PACKAGE_NAME_HKRPG, APP_LABEL_12306)

/*

    // ========== 图标
    findMethod("android.content.pm.PackageItemInfo") {
        name == "loadIcon" && returnType == Drawable::class.java && paramCount == 1 && isNotStatic && isPublic
    }.hookBefore {
        if (*/
/*((it.args[0] as PackageManager).getObjectAs<String>("mPackageName", String::class.java) == "com.MobileTicket") ||*//*
 (it.thisObject.getObjectAs<String>("packageName", String::class.java) == "com.MobileTicket")) {
            val bytes: ByteArray = Base64.decode(ICON_HKRPG_BASE64, Base64.DEFAULT)
            val myBitmap = BitmapFactory.decodeByteArray(bytes, 0, bytes.size)
            it.result = BitmapDrawable(myBitmap)
        }
    }

    findMethod("android.content.pm.PackageItemInfo") {
        name == "loadIcon" && returnType == Drawable::class.java && paramCount == 1 && isNotStatic && isPublic
    }.hookBefore {
        if (it.thisObject.getObjectAs<String>("packageName", String::class.java) == "com.MobileTicket") {
            val bytes: ByteArray = Base64.decode(ICON_HKRPG_BASE64, Base64.DEFAULT)
            val myBitmap = BitmapFactory.decodeByteArray(bytes, 0, bytes.size)
            it.result = BitmapDrawable(myBitmap)
        }
    }

    // ========== 标题
    findMethod("android.app.ApplicationPackageManager") {
        name == "getText" && returnType == CharSequence::class.java && isNotStatic && isPublic
    }.hookBefore {
        if (it.args[0] == "com.MobileTicket") {
            it.result = APP_LABEL_HKRPG
        }
    }

    findMethod("android.content.pm.PackageItemInfo") {
        name == "loadLabel" && returnType == CharSequence::class.java && paramCount == 1 && isNotStatic && isPublic
    }.hookBefore {
        val packageName = it.thisObject.getObjectAs<String>("packageName", String::class.java)
        if (packageName == "com.MobileTicket") {
            it.result = APP_LABEL_HKRPG
        }
    }

*/

    // ========== 旧代码
    /*findMethod("android.app.ApplicationPackageManager") {
        name == "getApplicationInfo" && returnType == ApplicationInfo::class.java && isNotStatic && isPublic
    }.hookAfter {
        val mAppinfo = it.result as ApplicationInfo
        if (mAppinfo.packageName == "com.MobileTicket") {
            //it.result =
        }
    }*/



    /*findMethod("android.app.ApplicationPackageManager") {
        name == "getApplicationIcon" && returnType == Drawable::class.java && isPublic && isNotStatic
    }.hookBefore {
        val bytes: ByteArray = Base64.decode(HKRPG_ICON_BASE64, Base64.DEFAULT)
        val myBitmap = BitmapFactory.decodeByteArray(bytes, 0, bytes.size)
        it.result = BitmapDrawable(myBitmap)
    }*/

    /*
        findAllConstructors(PackageItemInfo::class.java) {
            paramCount == 1 && isNotStatic && isPublic
        }.hookAfter {
            //val packageName = it.thisObject.getObjectAs<String>("packageName", String::class.java)
            it.thisObject.putObject("name", "啊哈哈哈", String::class.java)
        }*/

    /*var serviceManagerHook: XC_MethodHook.Unhook? = null
    serviceManagerHook = findMethod("android.os.ServiceManager") {
        name == "addService"
    }.hookBefore { param ->
        if (param.args[0] == "package") {
            serviceManagerHook?.unhook()
            val pms = param.args[1] as PackageManager

            findMethod(pms::class.java, findSuper = true) {
                name == "getPackageInfo"
            }.hookAfter {
                try {
                    val packageName = it.args[0] as String
                    XposedBridge.log("hooked! package name = $packageName")
                    if (packageName.contains("com.MobileTicket")) {
                        // Modify the app name and icon
                        val packageInfo = it.result as PackageInfo
                        val appInfo = packageInfo.applicationInfo

                        // New app name
                        appInfo.loadLabel(it.thisObject as PackageManager)
                        val newAppName: CharSequence = "New App Name"
                        XposedHelpers.setObjectField(appInfo, "mLabel", newAppName)

                        // New app icon (replace "bitmap" with your desired bitmap)
                        //val newAppIcon: Drawable = bitmap
                        //XposedHelpers.setObjectField(appInfo, "mIcon", newAppIcon)
                    }
                } catch (e: Exception) {
                    XposedBridge.log(e)
                }
            }

        }
    }*/
}

fun hookIcon(goalPkgName:String, newIconBase64:String){
    findMethod("android.content.pm.PackageItemInfo") {
        name == "loadIcon" && returnType == Drawable::class.java && paramCount == 1 && isNotStatic && isPublic
    }.hookBefore {
        if ((it.thisObject.getObjectAs<String>("packageName", String::class.java) == goalPkgName) || (it.thisObject.getObjectAs<String>("packageName", String::class.java) == goalPkgName)) {
            val bytes: ByteArray = Base64.decode(newIconBase64, Base64.DEFAULT)
            val myBitmap = BitmapFactory.decodeByteArray(bytes, 0, bytes.size)
            it.result = BitmapDrawable(myBitmap)
        }
    }
}

fun hookLabel(goalPkgName:String, newAppLabel:String){
/*    findMethod("android.app.ApplicationPackageManager") {
        name == "getText" && returnType == CharSequence::class.java && isNotStatic && isPublic
    }.hookBefore {
        if (it.args[0] == goalPkgName) {
            it.result = newAppLabel
        }
    }*/

    findMethod("android.content.pm.PackageItemInfo") {
        name == "loadLabel" && returnType == CharSequence::class.java && paramCount == 1 && isNotStatic && isPublic
    }.hookBefore {
        val packageName = it.thisObject.getObjectAs<String>("packageName", String::class.java)
        if (packageName == goalPkgName) {
            it.result = newAppLabel
        }
    }
}